name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu Latest GCC",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              conan_profile: "default"
            }
          - {
              name: "Windows Latest MSVC",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              conan_profile: "default"
            }
          - {
              name: "macOS Latest Clang",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              conan_profile: "default"
            }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install "conan>=2.0"

    - name: Configure Conan profile
      run: |
        conan profile detect --force

    - name: Install dependencies
      run: |
        conan install . --build=missing -s build_type=${{ env.BUILD_TYPE }} \
          -o enable_testing=True -o enable_benchmarks=False

    - name: Configure CMake
      run: |
        cmake --preset conan-default -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: |
        cmake --build --preset conan-release --parallel

    - name: Run unit tests
      run: |
        ctest --preset conan-release --output-on-failure

    # Linux-specific steps
    - name: Install Valgrind (Linux)
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind

    - name: Memory leak check (Linux)
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all \
          ./build/Release/run_tests || echo "Valgrind not ready yet - tests don't exist"

    # Windows-specific steps  
    - name: Install Dr. Memory (Windows)
      if: matrix.config.os == 'windows-latest'
      run: |
        # Dr. Memory installation will be added in Phase P3
        echo "Dr. Memory installation placeholder"

    - name: Memory leak check (Windows)
      if: matrix.config.os == 'windows-latest'
      run: |
        # Will add Dr. Memory execution in Phase P3
        echo "Windows memory leak check placeholder"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check code formatting
      run: |
        find src include tests -name "*.cpp" -o -name "*.h" | \
          xargs clang-format --dry-run --Werror

    - name: Install clang-tidy (for future use)
      run: |
        sudo apt-get install -y clang-tidy
        echo "clang-tidy will be integrated in Phase P1"

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Build documentation
      run: |
        # Will be implemented in Phase P5
        echo "Doxygen documentation build placeholder"

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html
        enable_jekyll: false
      # Will be activated in Phase P5 