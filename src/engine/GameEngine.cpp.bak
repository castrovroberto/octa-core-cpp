#include "octa-core/engine/GameEngine.h"

GameEngine::GameEngine(std::shared_ptr<IGameMap> map) : gameMap_(map) {
    if (!gameMap_) {
        throw std::invalid_argument("GameEngine requires a valid IGameMap implementation");
    }
}

void GameEngine::run() {
    std::cout << "GameEngine is running..." << std::endl;
    
    // Display map information
    displayMapInfo();
    
    // Demonstrate that we can access the map through the interface
    auto centerCell = gameMap_->getCell(Coordinate(0, 0));
    if (centerCell) {
        std::cout << "Center cell found at (" << centerCell->getCoordinate().getX() 
                  << ", " << centerCell->getCoordinate().getY() << ")" << std::endl;
                  
        // Show neighbor count
        auto validNeighbors = centerCell->getValidNeighbors();
        std::cout << "Center cell has " << validNeighbors.size() << " neighbors" << std::endl;
    }
    
    // The main 'while (!logic->isGameOver())' loop would go here.
    std::cout << "Game loop would continue here..." << std::endl;
}

void GameEngine::displayMapInfo() const {
    std::cout << "\n=== Map Information ===" << std::endl;
    std::cout << "Map size (radius): " << gameMap_->getSize() << std::endl;
    std::cout << "Total cells: " << gameMap_->getTotalCellCount() << std::endl;
    
    // Sample a few cells to show the map is working
    std::cout << "\nSample cells:" << std::endl;
    std::vector<Coordinate> sampleCoords = {
        Coordinate(0, 0),   // Center
        Coordinate(1, 0),   // East
        Coordinate(0, 1),   // North-East
        Coordinate(-1, 1),  // North-West
    };
    
    for (const auto& coord : sampleCoords) {
        auto cell = gameMap_->getCell(coord);
        std::cout << "  Cell at (" << coord.getX() << ", " << coord.getY() << "): " 
                  << (cell ? "EXISTS" : "NULL") << std::endl;
    }
    std::cout << "======================\n" << std::endl;
} 